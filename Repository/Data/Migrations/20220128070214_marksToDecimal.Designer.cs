// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Data;

namespace Repository.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220128070214_marksToDecimal")]
    partial class marksToDecimal
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("ApplicantCurrentStatusId")
                        .HasColumnType("int");

                    b.Property<int>("BEEFSectionId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SchemeLevelAccess")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UsernameChangeLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DAL.Models.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("DAL.Models.Domain.ImportResult.ColumnLabel", b =>
                {
                    b.Property<int>("ColumnLabelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("C1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C11")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C12")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C13")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C14")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C15")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C16")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C8")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C9")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ResultRepositoryId")
                        .HasColumnType("int");

                    b.HasKey("ColumnLabelId");

                    b.HasIndex("ResultRepositoryId");

                    b.ToTable("ColumnLabel", "ImportResult");
                });

            modelBuilder.Entity("DAL.Models.Domain.ImportResult.ColumnLabelTemp", b =>
                {
                    b.Property<int>("ColumnLabelTempId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("C1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C11")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C12")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C13")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C14")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C15")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C16")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C8")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C9")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ResultRepositoryTempId")
                        .HasColumnType("int");

                    b.HasKey("ColumnLabelTempId");

                    b.HasIndex("ResultRepositoryTempId");

                    b.ToTable("ColumnLabelTemp", "ImportResult");
                });

            modelBuilder.Entity("DAL.Models.Domain.ImportResult.DocumentAssist", b =>
                {
                    b.Property<int>("DocumentAssistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConditionalOperator")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentAssistId");

                    b.ToTable("DocumentAssist", "ImportResult");
                });

            modelBuilder.Entity("DAL.Models.Domain.ImportResult.DocumentAssistIndicator", b =>
                {
                    b.Property<int>("DocumentAssistIndicatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DocumentAssistId")
                        .HasColumnType("int");

                    b.Property<int>("ExcelColumnNameId")
                        .HasColumnType("int");

                    b.Property<int>("ResultRepositoryId")
                        .HasColumnType("int");

                    b.Property<int>("TotalFind")
                        .HasColumnType("int");

                    b.HasKey("DocumentAssistIndicatorId");

                    b.HasIndex("DocumentAssistId");

                    b.HasIndex("ExcelColumnNameId");

                    b.HasIndex("ResultRepositoryId");

                    b.ToTable("DocumentAssistIndicator", "ImportResult");
                });

            modelBuilder.Entity("DAL.Models.Domain.ImportResult.ExcelColumnName", b =>
                {
                    b.Property<int>("ExcelColumnNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExcelColumnNameId");

                    b.ToTable("ExcelColumnName", "ImportResult");
                });

            modelBuilder.Entity("DAL.Models.Domain.ImportResult.ResultContainer", b =>
                {
                    b.Property<int>("ResultContainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CGPA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CNIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Candidate_District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Father_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Institute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Institute_District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOnCriteria")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<decimal>("Marks_")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pass_Fail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("REG_NO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResultRepositoryId")
                        .HasColumnType("int");

                    b.Property<string>("Roll_NO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalGPA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalMarks_")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ResultContainerId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ResultRepositoryId");

                    b.ToTable("ResultContainer", "ImportResult");
                });

            modelBuilder.Entity("DAL.Models.Domain.ImportResult.ResultContainerTemp", b =>
                {
                    b.Property<int>("ResultContainerTempId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CGPA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CNIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Candidate_District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Father_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Institute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Institute_District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Marks_")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pass_Fail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("REG_NO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResultRepositoryTempId")
                        .HasColumnType("int");

                    b.Property<string>("Roll_NO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalGPA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalMarks_")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ResultContainerTempId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ResultRepositoryTempId");

                    b.ToTable("ResultContainerTemp", "ImportResult");
                });

            modelBuilder.Entity("DAL.Models.Domain.ImportResult.ResultRepository", b =>
                {
                    b.Property<int>("ResultRepositoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DAEInstituteId")
                        .HasColumnType("int");

                    b.Property<int?>("DegreeScholarshipLevelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDataCleaned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMeritListGenerated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSelctionCriteriaApplied")
                        .HasColumnType("bit");

                    b.Property<int>("SchemeLevelPolicyId")
                        .HasColumnType("int");

                    b.Property<int>("ScholarshipFiscalYearId")
                        .HasColumnType("int");

                    b.Property<int>("currentCounter")
                        .HasColumnType("int");

                    b.Property<string>("resultFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("resultScannedFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResultRepositoryId");

                    b.HasIndex("DAEInstituteId");

                    b.HasIndex("DegreeScholarshipLevelId");

                    b.HasIndex("SchemeLevelPolicyId");

                    b.HasIndex("ScholarshipFiscalYearId");

                    b.ToTable("ResultRepository", "ImportResult");
                });

            modelBuilder.Entity("DAL.Models.Domain.ImportResult.ResultRepositoryTemp", b =>
                {
                    b.Property<int>("ResultRepositoryTempId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DAEInstituteId")
                        .HasColumnType("int");

                    b.Property<int>("DegreeScholarshipLevelId")
                        .HasColumnType("int");

                    b.Property<int>("SchemeLevelPolicyId")
                        .HasColumnType("int");

                    b.Property<int>("ScholarshipFiscalYearId")
                        .HasColumnType("int");

                    b.Property<string>("resultFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("resultScannedFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResultRepositoryTempId");

                    b.HasIndex("SchemeLevelPolicyId");

                    b.HasIndex("ScholarshipFiscalYearId");

                    b.ToTable("ResultRepositoryTemp", "ImportResult");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.BEEFSection", b =>
                {
                    b.Property<int>("BEEFSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BEEFSectionId");

                    b.ToTable("BEEFSection", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.DAEInstitute", b =>
                {
                    b.Property<int>("DAEInstituteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DAEYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Enrollment1stY")
                        .HasColumnType("int");

                    b.Property<int>("Enrollment2ndY")
                        .HasColumnType("int");

                    b.Property<int>("Enrollment3rdY")
                        .HasColumnType("int");

                    b.Property<string>("FaxNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FocalPersonEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FocalPersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FocalPersonPhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAbbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PercentageSlots")
                        .HasColumnType("real");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvienceId")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DAEInstituteId");

                    b.HasIndex("DistrictId");

                    b.ToTable("DAEInstitute", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Degree", b =>
                {
                    b.Property<int>("DegreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QualificationLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ResultSystem")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DegreeId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("QualificationLevelId");

                    b.ToTable("Degree", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.DegreeLevel", b =>
                {
                    b.Property<int>("DegreeLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DegreeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("DegreeLevelId");

                    b.HasIndex("DegreeId");

                    b.ToTable("DegreeLevel", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.DegreeScholarshipLevel", b =>
                {
                    b.Property<int>("DegreeScholarshipLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DegreeLevelId")
                        .HasColumnType("int");

                    b.Property<int>("Enrollment")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchemeLevelId")
                        .HasColumnType("int");

                    b.Property<float>("Slot")
                        .HasColumnType("real");

                    b.HasKey("DegreeScholarshipLevelId");

                    b.HasIndex("DegreeLevelId");

                    b.HasIndex("SchemeLevelId");

                    b.ToTable("DegreeScholarshipLevel", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Discipline", b =>
                {
                    b.Property<int>("DisciplineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DisciplineId");

                    b.ToTable("Discipline", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DivisionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistrictId");

                    b.HasIndex("DivisionId");

                    b.ToTable("District", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.DistrictDetail", b =>
                {
                    b.Property<int>("DistrictDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CensesYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<float>("FemaleRatio")
                        .HasColumnType("real");

                    b.Property<float>("GrowthRate")
                        .HasColumnType("real");

                    b.Property<float>("MPIDifferenceFromStatndard")
                        .HasColumnType("real");

                    b.Property<float>("MPIScore")
                        .HasColumnType("real");

                    b.Property<float>("MaleRatio")
                        .HasColumnType("real");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.HasKey("DistrictDetailId");

                    b.HasIndex("DistrictId");

                    b.ToTable("DistrictDetail", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Division", b =>
                {
                    b.Property<int>("DivisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvienceId")
                        .HasColumnType("int");

                    b.HasKey("DivisionId");

                    b.HasIndex("ProvienceId");

                    b.ToTable("Division", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.DocumentAssistGeneral", b =>
                {
                    b.Property<int>("DocumentAssistGeneralId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DegreeScholarshipLevelId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentAssistId")
                        .HasColumnType("int");

                    b.Property<int>("ExcelColumnNameId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SchemeLevelId")
                        .HasColumnType("int");

                    b.Property<int>("TotalFind")
                        .HasColumnType("int");

                    b.HasKey("DocumentAssistGeneralId");

                    b.HasIndex("DegreeScholarshipLevelId");

                    b.HasIndex("DocumentAssistId");

                    b.HasIndex("ExcelColumnNameId");

                    b.HasIndex("SchemeLevelId");

                    b.ToTable("DocumentAssistGeneral", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BEEFSectionId")
                        .HasColumnType("int");

                    b.Property<string>("ContactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSectionHead")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("BEEFSectionId");

                    b.ToTable("Employee", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Faculty", b =>
                {
                    b.Property<int>("FacultyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FacultyId");

                    b.ToTable("Faculty", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenderId");

                    b.ToTable("Gender", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Institute", b =>
                {
                    b.Property<int>("InstituteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaxNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FocalPersonEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FocalPersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FocalPersonPhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstituteTypeId")
                        .HasColumnType("int");

                    b.Property<string>("LogoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAbbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvienceId")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstituteId");

                    b.HasIndex("InstituteTypeId");

                    b.HasIndex("ProvienceId");

                    b.ToTable("Institute", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.InstituteDepartment", b =>
                {
                    b.Property<int>("InstituteDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<string>("FocalPersonContactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FocalPersonDesignation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FocalPersonEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FocalPersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstituteFacultyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstituteDepartmentId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("InstituteFacultyId");

                    b.ToTable("InstituteDepartment", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.InstituteFaculty", b =>
                {
                    b.Property<int>("InstituteFacultyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("FocalPersonContactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FocalPersonDesignation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FocalPersonEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FocalPersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstituteId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstituteFacultyId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("InstituteId");

                    b.ToTable("InstituteFaculty", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.InstituteType", b =>
                {
                    b.Property<int>("InstituteTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstituteTypeId");

                    b.ToTable("InstituteType", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Operator", b =>
                {
                    b.Property<int>("OperatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatorType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OperatorId");

                    b.ToTable("Operator", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentMethodId");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Preference", b =>
                {
                    b.Property<int>("PreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("BSProfDistrictThresholdFor1stY")
                        .HasColumnType("real");

                    b.Property<float>("BSProfThresholdForClass")
                        .HasColumnType("real");

                    b.Property<float>("DAEThreshold")
                        .HasColumnType("real");

                    b.Property<float>("DOMSBachelor1stYQoutaPER")
                        .HasColumnType("real");

                    b.Property<float>("DOMSBachelorClassQoutaPER")
                        .HasColumnType("real");

                    b.Property<float>("DOMSDAEQoutaPER")
                        .HasColumnType("real");

                    b.Property<float>("DOMSGraduationQoutaPER")
                        .HasColumnType("real");

                    b.Property<float>("DOMSIntermediateQoutaPER")
                        .HasColumnType("real");

                    b.Property<float>("DOMSMSQoutaPER")
                        .HasColumnType("real");

                    b.Property<float>("DOMSMasterQoutaPER")
                        .HasColumnType("real");

                    b.Property<float>("DOMSMatricQoutaPER")
                        .HasColumnType("real");

                    b.Property<int>("DistrictSlotMPIPer")
                        .HasColumnType("int");

                    b.Property<int>("DistrictSlotPopulationPer")
                        .HasColumnType("int");

                    b.Property<float>("GraduationPROF1stYSlot")
                        .HasColumnType("real");

                    b.Property<float>("GraduationPROF2ndYSlot")
                        .HasColumnType("real");

                    b.Property<float>("GraduationPROF3rdYSlot")
                        .HasColumnType("real");

                    b.Property<float>("GraduationPROF4thYSlot")
                        .HasColumnType("real");

                    b.Property<float>("GraduationPROF5thYSlot")
                        .HasColumnType("real");

                    b.Property<float>("GraduationThreshold")
                        .HasColumnType("real");

                    b.Property<float>("IOMSBachelor1stYQoutaPER")
                        .HasColumnType("real");

                    b.Property<float>("IOMSBachelorClassQoutaPER")
                        .HasColumnType("real");

                    b.Property<float>("IOMSDAEQoutaPER")
                        .HasColumnType("real");

                    b.Property<float>("IOMSGraduationQoutaPER")
                        .HasColumnType("real");

                    b.Property<float>("IOMSMSQoutaPER")
                        .HasColumnType("real");

                    b.Property<float>("IOMSMasterQoutaPER")
                        .HasColumnType("real");

                    b.Property<float>("IntermediateThreshold")
                        .HasColumnType("real");

                    b.Property<float>("MSSlot")
                        .HasColumnType("real");

                    b.Property<float>("MSThreshold")
                        .HasColumnType("real");

                    b.Property<float>("Master1stYSlot")
                        .HasColumnType("real");

                    b.Property<float>("Master2ndYSlot")
                        .HasColumnType("real");

                    b.Property<float>("MasterThreshold")
                        .HasColumnType("real");

                    b.Property<float>("MatricThreshold")
                        .HasColumnType("real");

                    b.Property<float>("POMSIntermediateQoutaPER")
                        .HasColumnType("real");

                    b.Property<float>("POMSMatricQoutaPER")
                        .HasColumnType("real");

                    b.Property<float>("PhDThreshold")
                        .HasColumnType("real");

                    b.Property<float>("Qouta")
                        .HasColumnType("real");

                    b.Property<float>("SQSEVIBachelor1stYQoutaPER")
                        .HasColumnType("real");

                    b.Property<float>("SQSEVIBachelorClassQoutaPER")
                        .HasColumnType("real");

                    b.Property<float>("SQSEVIDAEQoutaPER")
                        .HasColumnType("real");

                    b.Property<float>("SQSEVIGraduationQoutaPER")
                        .HasColumnType("real");

                    b.Property<float>("SQSEVIMSQoutaPER")
                        .HasColumnType("real");

                    b.Property<float>("SQSEVIMasterQoutaPER")
                        .HasColumnType("real");

                    b.Property<float>("SQSEVIMatricQoutaPER")
                        .HasColumnType("real");

                    b.Property<float>("SQSIntermediateEVIQouta")
                        .HasColumnType("real");

                    b.Property<float>("SQSOMSBachelor1stYQoutaPER")
                        .HasColumnType("real");

                    b.Property<float>("SQSOMSBachelorClassQoutaPER")
                        .HasColumnType("real");

                    b.Property<float>("SQSOMSDAEQoutaPER")
                        .HasColumnType("real");

                    b.Property<float>("SQSOMSGraduationQoutaPER")
                        .HasColumnType("real");

                    b.Property<float>("SQSOMSIntermediateQouta")
                        .HasColumnType("real");

                    b.Property<float>("SQSOMSMSQoutaPER")
                        .HasColumnType("real");

                    b.Property<float>("SQSOMSMasterQoutaPER")
                        .HasColumnType("real");

                    b.Property<float>("SQSOMSMatricQoutaPER")
                        .HasColumnType("real");

                    b.Property<int>("SchemeBacholarStipend")
                        .HasColumnType("int");

                    b.Property<int>("SchemeDAEStipend")
                        .HasColumnType("int");

                    b.Property<int>("SchemeGraduationStipend")
                        .HasColumnType("int");

                    b.Property<int>("SchemeIntermediateStipend")
                        .HasColumnType("int");

                    b.Property<int>("SchemeMSStipend")
                        .HasColumnType("int");

                    b.Property<int>("SchemeMasterStipend")
                        .HasColumnType("int");

                    b.Property<int>("SchemeMatricStipend")
                        .HasColumnType("int");

                    b.Property<float>("SlotBacholar1Y")
                        .HasColumnType("real");

                    b.Property<float>("SlotDAE1Y")
                        .HasColumnType("real");

                    b.Property<float>("SlotDAE2Y")
                        .HasColumnType("real");

                    b.Property<float>("SlotDAE3Y")
                        .HasColumnType("real");

                    b.Property<float>("SlotFAFSc1Y")
                        .HasColumnType("real");

                    b.Property<float>("SlotFAFSc2Y")
                        .HasColumnType("real");

                    b.Property<string>("SlotGraduationPROFCalculationMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlotMSCalculationMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlotMasterCalculationMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("SlotMetric")
                        .HasColumnType("real");

                    b.HasKey("PreferenceId");

                    b.ToTable("Preference", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Provience", b =>
                {
                    b.Property<int>("ProvienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvienceId");

                    b.ToTable("Provience", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.QualificationLevel", b =>
                {
                    b.Property<int>("QualificationLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QualificationLevelId");

                    b.ToTable("QualificationLevel", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.SMSMassage", b =>
                {
                    b.Property<int>("SMSMassageTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Massage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SMSType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SMSMassageTypeId");

                    b.ToTable("SMSMassage", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Scheme", b =>
                {
                    b.Property<int>("SchemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScholarshipId")
                        .HasColumnType("int");

                    b.HasKey("SchemeId");

                    b.HasIndex("ScholarshipId");

                    b.ToTable("Scheme", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.SchemeLevel", b =>
                {
                    b.Property<int>("SchemeLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradingSystem")
                        .HasColumnType("int");

                    b.Property<int>("InstituteId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderBy")
                        .HasColumnType("int");

                    b.Property<int>("QualificationLevelId")
                        .HasColumnType("int");

                    b.Property<int>("SchemeId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalMarks_GPA")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SchemeLevelId");

                    b.HasIndex("InstituteId");

                    b.HasIndex("QualificationLevelId");

                    b.HasIndex("SchemeId");

                    b.ToTable("SchemeLevel", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.SchemeLevelMandatoryColumn", b =>
                {
                    b.Property<int>("SchemeLevelMandatoryColumnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExcelColumnNameId")
                        .HasColumnType("int");

                    b.Property<int>("SchemeLevelId")
                        .HasColumnType("int");

                    b.HasKey("SchemeLevelMandatoryColumnId");

                    b.HasIndex("ExcelColumnNameId");

                    b.HasIndex("SchemeLevelId");

                    b.ToTable("SchemeLevelMandatoryColumn", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.SectionComment", b =>
                {
                    b.Property<int>("SectionCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BEEFSectionId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SeverityLevelId")
                        .HasColumnType("int");

                    b.HasKey("SectionCommentId");

                    b.HasIndex("BEEFSectionId");

                    b.HasIndex("SeverityLevelId");

                    b.ToTable("SectionComment", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.SelectionCriteriaGeneral", b =>
                {
                    b.Property<int>("SelectionCriteriaGeneralId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Expression")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchemeLevelId")
                        .HasColumnType("int");

                    b.HasKey("SelectionCriteriaGeneralId");

                    b.HasIndex("SchemeLevelId");

                    b.ToTable("SelectionCriteriaGeneral", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.SelectionMethod", b =>
                {
                    b.Property<int>("SelectionMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SelectionMethodId");

                    b.ToTable("SelectionMethod", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.SeverityLevel", b =>
                {
                    b.Property<int>("SeverityLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Meaning")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeverityLevelId");

                    b.ToTable("SeverityLevel", "Master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.UserAccessToForward", b =>
                {
                    b.Property<int>("UserAccessToForwardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicantCurrentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserAccessToForwardId");

                    b.HasIndex("ApplicantCurrentStatusId");

                    b.ToTable("UserAccessToForward", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.UserAccessToSchemeLevel", b =>
                {
                    b.Property<int>("UserAccessToSchemeLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SchemeLevelId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserAccessToSchemeLevelId");

                    b.HasIndex("SchemeLevelId");

                    b.ToTable("UserAccessToSchemeLevel", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.ScholarshipSetup.DAEInstituteQoutaBySchemeLevel", b =>
                {
                    b.Property<int>("DAEInstituteQoutaBySchemeLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassEnrollment")
                        .HasColumnType("int");

                    b.Property<int>("DAEInstituteId")
                        .HasColumnType("int");

                    b.Property<float>("InstituteAdditionalSlot")
                        .HasColumnType("real");

                    b.Property<int>("PolicySRCForumId")
                        .HasColumnType("int");

                    b.Property<int>("SchemeLevelPolicyId")
                        .HasColumnType("int");

                    b.Property<float>("SlotAllocate")
                        .HasColumnType("real");

                    b.Property<int>("StipendAmount")
                        .HasColumnType("int");

                    b.Property<float>("Threshold")
                        .HasColumnType("real");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DAEInstituteQoutaBySchemeLevelId");

                    b.HasIndex("DAEInstituteId");

                    b.HasIndex("PolicySRCForumId");

                    b.HasIndex("SchemeLevelPolicyId");

                    b.ToTable("DAEInstituteQoutaBySchemeLevel");
                });

            modelBuilder.Entity("DAL.Models.Domain.ScholarshipSetup.DegreeLevelQoutaBySchemeLevel", b =>
                {
                    b.Property<int>("DegreeLevelQoutaBySchemeLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("AdditionalSlotAllocate")
                        .HasColumnType("real");

                    b.Property<int>("ClassEnrollment")
                        .HasColumnType("int");

                    b.Property<int>("DegreeScholarshipLevelId")
                        .HasColumnType("int");

                    b.Property<int>("PolicySRCForumId")
                        .HasColumnType("int");

                    b.Property<int>("SchemeLevelPolicyId")
                        .HasColumnType("int");

                    b.Property<float>("SlotAllocate")
                        .HasColumnType("real");

                    b.Property<int>("StipendAmount")
                        .HasColumnType("int");

                    b.Property<float>("Threshold")
                        .HasColumnType("real");

                    b.HasKey("DegreeLevelQoutaBySchemeLevelId");

                    b.HasIndex("DegreeScholarshipLevelId");

                    b.HasIndex("PolicySRCForumId");

                    b.HasIndex("SchemeLevelPolicyId");

                    b.ToTable("DegreeLevelQoutaBySchemeLevel", "scholar");
                });

            modelBuilder.Entity("DAL.Models.Domain.ScholarshipSetup.DistrictQoutaBySchemeLevel", b =>
                {
                    b.Property<int>("DistrictQoutaBySchemeLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrentYearPopulation")
                        .HasColumnType("int");

                    b.Property<float>("DistrictAdditionalSlot")
                        .HasColumnType("real");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<float>("DistrictMPISlot")
                        .HasColumnType("real");

                    b.Property<float>("DistrictPopulationSlot")
                        .HasColumnType("real");

                    b.Property<float>("MPI")
                        .HasColumnType("real");

                    b.Property<float>("MPIDifferenceFromStatndard")
                        .HasColumnType("real");

                    b.Property<int>("PolicySRCForumId")
                        .HasColumnType("int");

                    b.Property<int>("SchemeLevelPolicyId")
                        .HasColumnType("int");

                    b.Property<int>("StipendAmount")
                        .HasColumnType("int");

                    b.Property<float>("Threshold")
                        .HasColumnType("real");

                    b.HasKey("DistrictQoutaBySchemeLevelId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("PolicySRCForumId");

                    b.HasIndex("SchemeLevelPolicyId");

                    b.ToTable("DistrictQoutaBySchemeLevel", "scholar");
                });

            modelBuilder.Entity("DAL.Models.Domain.ScholarshipSetup.PolicySRCForum", b =>
                {
                    b.Property<int>("PolicySRCForumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEndorse")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFreez")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PolicyDocumentAttachmentPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SRCMinutesAttachmentPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScholarshipFiscalYearId")
                        .HasColumnType("int");

                    b.HasKey("PolicySRCForumId");

                    b.HasIndex("ScholarshipFiscalYearId");

                    b.ToTable("PolicySRCForum", "scholar");
                });

            modelBuilder.Entity("DAL.Models.Domain.ScholarshipSetup.SchemeLevelPayment", b =>
                {
                    b.Property<int>("SchemeLevelPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("DOMS")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("POMS")
                        .HasColumnType("int");

                    b.Property<int>("SQSEVIs")
                        .HasColumnType("int");

                    b.Property<int>("SQSOMS")
                        .HasColumnType("int");

                    b.Property<int>("SchemeLevelId")
                        .HasColumnType("int");

                    b.Property<int>("ScholarshipFiscalYearId")
                        .HasColumnType("int");

                    b.Property<int>("ScholarshipQouta")
                        .HasColumnType("int");

                    b.HasKey("SchemeLevelPaymentId");

                    b.HasIndex("SchemeLevelId");

                    b.HasIndex("ScholarshipFiscalYearId");

                    b.ToTable("SchemeLevelPayment", "scholar");
                });

            modelBuilder.Entity("DAL.Models.Domain.ScholarshipSetup.SchemeLevelPolicy", b =>
                {
                    b.Property<int>("SchemeLevelPolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<float>("DOMS")
                        .HasColumnType("real");

                    b.Property<float>("POMS")
                        .HasColumnType("real");

                    b.Property<int>("PolicySRCForumId")
                        .HasColumnType("int");

                    b.Property<float>("SQSEVIs")
                        .HasColumnType("real");

                    b.Property<float>("SQSOMS")
                        .HasColumnType("real");

                    b.Property<int>("SchemeLevelId")
                        .HasColumnType("int");

                    b.Property<float>("ScholarshipSlot")
                        .HasColumnType("real");

                    b.HasKey("SchemeLevelPolicyId");

                    b.HasIndex("PolicySRCForumId");

                    b.HasIndex("SchemeLevelId");

                    b.ToTable("SchemeLevelPolicy", "scholar");
                });

            modelBuilder.Entity("DAL.Models.Domain.ScholarshipSetup.Scholarship", b =>
                {
                    b.Property<int>("ScholarshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScholarshipId");

                    b.ToTable("Scholarship", "scholar");
                });

            modelBuilder.Entity("DAL.Models.Domain.ScholarshipSetup.ScholarshipFiscalYear", b =>
                {
                    b.Property<int>("ScholarshipFiscalYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScholarshipFiscalYearId");

                    b.ToTable("ScholarshipFiscalYear", "scholar");
                });

            modelBuilder.Entity("DAL.Models.Domain.ScholarshipSetup.SelectionCriteria", b =>
                {
                    b.Property<int>("SelectionCriteriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExcelColumnNameId")
                        .HasColumnType("int");

                    b.Property<int>("OperatorId")
                        .HasColumnType("int");

                    b.Property<int>("ResultRepositoryId")
                        .HasColumnType("int");

                    b.HasKey("SelectionCriteriaId");

                    b.HasIndex("ExcelColumnNameId");

                    b.HasIndex("OperatorId");

                    b.HasIndex("ResultRepositoryId");

                    b.ToTable("SelectionCriteria", "ScholarshipSetup");
                });

            modelBuilder.Entity("DAL.Models.Domain.Student.Applicant", b =>
                {
                    b.Property<int>("ApplicantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicantCurrentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicantReferenceNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApplicantSelectionStatusId")
                        .HasColumnType("int");

                    b.Property<bool>("Attach_Affidavit")
                        .HasColumnType("bit");

                    b.Property<bool>("Attach_CNIC_BForm")
                        .HasColumnType("bit");

                    b.Property<bool>("Attach_DMC_Transcript")
                        .HasColumnType("bit");

                    b.Property<bool>("Attach_Father_Death_Certificate")
                        .HasColumnType("bit");

                    b.Property<bool>("Attach_Father_Mother_Guardian_CNIC")
                        .HasColumnType("bit");

                    b.Property<bool>("Attach_Minority_Certificate")
                        .HasColumnType("bit");

                    b.Property<bool>("Attach_Payslip")
                        .HasColumnType("bit");

                    b.Property<bool>("Attach_Picture")
                        .HasColumnType("bit");

                    b.Property<string>("BFormCNIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentInsituteAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentInsituteFax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentInsituteFocalDesignation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentInsituteFocalEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentInsituteFocalMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentInsituteFocalPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentInsituteHOD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentInsituteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentInsitutePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DegreeScholarshipLevelId")
                        .HasColumnType("int");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntryThrough")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherCareTakerCNIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FormSubmittedOnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFormEntered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFormSubmitted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameBoardUniversity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldInstitudeNameAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ProvienceId")
                        .HasColumnType("int");

                    b.Property<decimal>("ReceivedCGPA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReceivedMarks")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RegisterationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelationWithCareTaker")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Religion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RollNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScanDocument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScanOtherDocument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchemeLevelPolicyId")
                        .HasColumnType("int");

                    b.Property<int>("SelectionMethodId")
                        .HasColumnType("int");

                    b.Property<string>("SelectionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentMobile2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TehsilName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelephoneWithCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalGPA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalMarks")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicantId");

                    b.HasIndex("ApplicantCurrentStatusId");

                    b.HasIndex("ApplicantSelectionStatusId");

                    b.HasIndex("DegreeScholarshipLevelId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvienceId");

                    b.HasIndex("SchemeLevelPolicyId");

                    b.HasIndex("SelectionMethodId");

                    b.ToTable("Applicant", "Student");
                });

            modelBuilder.Entity("DAL.Models.Domain.Student.ApplicantAttachment", b =>
                {
                    b.Property<int>("ApplicantAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<string>("AttachmentPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ApplicantAttachmentId");

                    b.HasIndex("ApplicantId");

                    b.ToTable("ApplicantAttachment", "Student");
                });

            modelBuilder.Entity("DAL.Models.Domain.Student.ApplicantCurrentStatus", b =>
                {
                    b.Property<int>("ApplicantCurrentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BEEFSectionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProcessState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProcessValue")
                        .HasColumnType("int");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit");

                    b.Property<int>("VisibleStateNo")
                        .HasColumnType("int");

                    b.Property<string>("VisibleStateText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicantCurrentStatusId");

                    b.HasIndex("BEEFSectionId");

                    b.ToTable("ApplicantCurrentStatus", "Student");
                });

            modelBuilder.Entity("DAL.Models.Domain.Student.ApplicantSelectionStatus", b =>
                {
                    b.Property<int>("ApplicantSelectionStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SelectionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicantSelectionStatusId");

                    b.ToTable("ApplicantSelectionStatus", "Student");
                });

            modelBuilder.Entity("DAL.Models.Domain.Student.ApplicantStudent", b =>
                {
                    b.Property<int>("ApplicantStudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicantCurrentStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicantReferenceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("AttachFileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("AttachFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttachFileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SelectionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeverityLevelId")
                        .HasColumnType("int");

                    b.Property<int>("UserAccessToForwardId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicantStudentId");

                    b.HasIndex("ApplicantCurrentStatusId");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("SeverityLevelId");

                    b.ToTable("ApplicantStudent", "Student");
                });

            modelBuilder.Entity("DAL.Models.ViewModels.ApplicantInProcess.SPApplicantInProcess", b =>
                {
                    b.Property<int>("ApplicantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicantReferenceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RollNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.Property<string>("SchemeLevel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicantId");

                    b.ToTable("SPApplicantInProcess");
                });

            modelBuilder.Entity("DAL.Models.ViewModels.ApplicantInProcess.SPApplicantInProcessSummary", b =>
                {
                    b.Property<int>("SchemeLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Applicant")
                        .HasColumnType("int");

                    b.Property<string>("Qualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scheme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchemeId")
                        .HasColumnType("int");

                    b.Property<string>("SchemeLevel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchemeLevelId");

                    b.ToTable("SPApplicantInProcessSummary");
                });

            modelBuilder.Entity("DAL.Models.ViewModels.DAEPolicyDetailView", b =>
                {
                    b.Property<int>("DAEInstituteQoutaBySchemeLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassEnrollment")
                        .HasColumnType("int");

                    b.Property<int>("DAEInstituteId")
                        .HasColumnType("int");

                    b.Property<string>("DAEInstituteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("InstituteAdditionalSlot")
                        .HasColumnType("real");

                    b.Property<int>("PolicySRCForumId")
                        .HasColumnType("int");

                    b.Property<int?>("PolicyViewSchemeLevelId")
                        .HasColumnType("int");

                    b.Property<int>("SchemeLevelPolicyId")
                        .HasColumnType("int");

                    b.Property<float>("SlotAllocate")
                        .HasColumnType("real");

                    b.Property<int>("StipendAmount")
                        .HasColumnType("int");

                    b.Property<float>("Threshold")
                        .HasColumnType("real");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DAEInstituteQoutaBySchemeLevelId");

                    b.HasIndex("DAEInstituteId");

                    b.HasIndex("PolicySRCForumId");

                    b.HasIndex("PolicyViewSchemeLevelId");

                    b.HasIndex("SchemeLevelPolicyId");

                    b.ToTable("DAEPolicyDetailView");
                });

            modelBuilder.Entity("DAL.Models.ViewModels.DegreeSecondLevel", b =>
                {
                    b.Property<int>("CurrentYear")
                        .HasColumnType("int");

                    b.Property<int>("DegreeLevel")
                        .HasColumnType("int");

                    b.Property<int>("InstituteId")
                        .HasColumnType("int");

                    b.Property<string>("Scheme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchemeId")
                        .HasColumnType("int");

                    b.Property<string>("SchemeLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchemeLevelId")
                        .HasColumnType("int");

                    b.ToTable("DegreeSecondLevel");
                });

            modelBuilder.Entity("DAL.Models.ViewModels.DegreeThirdLevel", b =>
                {
                    b.Property<float>("AdditionalSlotAllocate")
                        .HasColumnType("real");

                    b.Property<int>("ClassEnrollment")
                        .HasColumnType("int");

                    b.Property<int>("CurrentYear")
                        .HasColumnType("int");

                    b.Property<int>("DegreeLevelQoutaBySchemeLevelId")
                        .HasColumnType("int");

                    b.Property<string>("DegreeScholarshipLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DegreeScholarshipLevelId")
                        .HasColumnType("int");

                    b.Property<int>("InstituteId")
                        .HasColumnType("int");

                    b.Property<string>("InstituteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchemeId")
                        .HasColumnType("int");

                    b.Property<float>("SlotAllocate")
                        .HasColumnType("real");

                    b.Property<int>("StipendAmount")
                        .HasColumnType("int");

                    b.Property<float>("Threshold")
                        .HasColumnType("real");

                    b.ToTable("DegreeThirdLevel");
                });

            modelBuilder.Entity("DAL.Models.ViewModels.PolicyDetailView", b =>
                {
                    b.Property<int>("DistrictQoutaBySchemeLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrentYearPopulation")
                        .HasColumnType("int");

                    b.Property<float>("DistrictAdditionalSlot")
                        .HasColumnType("real");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<float>("DistrictMPISlot")
                        .HasColumnType("real");

                    b.Property<float>("DistrictPopulationSlot")
                        .HasColumnType("real");

                    b.Property<float>("MPI")
                        .HasColumnType("real");

                    b.Property<float>("MPIDifferenceFromStatndard")
                        .HasColumnType("real");

                    b.Property<int>("PolicySRCForumId")
                        .HasColumnType("int");

                    b.Property<int>("PolicySRSForumId")
                        .HasColumnType("int");

                    b.Property<int?>("PolicyViewSchemeLevelId")
                        .HasColumnType("int");

                    b.Property<int>("SchemeLevelPolicyId")
                        .HasColumnType("int");

                    b.Property<int>("StipendAmount")
                        .HasColumnType("int");

                    b.Property<float>("Threshold")
                        .HasColumnType("real");

                    b.HasKey("DistrictQoutaBySchemeLevelId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("PolicyViewSchemeLevelId");

                    b.ToTable("PolicyDetailView");
                });

            modelBuilder.Entity("DAL.Models.ViewModels.PolicyView", b =>
                {
                    b.Property<int>("SchemeLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<double>("DAEAdditionalSlot")
                        .HasColumnType("float");

                    b.Property<float>("DOMS")
                        .HasColumnType("real");

                    b.Property<double>("DegreeAdditionalSlot")
                        .HasColumnType("float");

                    b.Property<double>("DistrictAdditionalSlot")
                        .HasColumnType("float");

                    b.Property<int>("InstituteId")
                        .HasColumnType("int");

                    b.Property<int>("OrderBy")
                        .HasColumnType("int");

                    b.Property<float>("POMS")
                        .HasColumnType("real");

                    b.Property<string>("PolicyForum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PolicySRCForumId")
                        .HasColumnType("int");

                    b.Property<string>("PolicyYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QualificationLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QualificationLevelId")
                        .HasColumnType("int");

                    b.Property<float>("SQSEVIs")
                        .HasColumnType("real");

                    b.Property<float>("SQSOMS")
                        .HasColumnType("real");

                    b.Property<string>("Scheme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchemeId")
                        .HasColumnType("int");

                    b.Property<string>("SchemeLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchemeLevelCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchemeLevelPolicyId")
                        .HasColumnType("int");

                    b.Property<float>("ScholarshipSlot")
                        .HasColumnType("real");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("SchemeLevelId");

                    b.ToTable("PolicyView");
                });

            modelBuilder.Entity("DAL.Models.ViewModels.SPAssistDocumentViewer", b =>
                {
                    b.Property<string>("ColumnValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SrNo")
                        .HasColumnType("int");

                    b.Property<int>("TotalFind")
                        .HasColumnType("int");

                    b.ToTable("SPAssistDocumentViewer");
                });

            modelBuilder.Entity("DAL.Models.ViewModels.SPDocumentViewerReport", b =>
                {
                    b.Property<string>("ColumnValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ROLL_NO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SrNo")
                        .HasColumnType("int");

                    b.Property<string>("TotalFind")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("SPDocumentViewerReport");
                });

            modelBuilder.Entity("DAL.Models.ViewModels.UserManagement.GetUserSchemeLevelAccess", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SchemeLevel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("GetUserSchemeLevelAccess");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SMSService.Models.Domain.AutoSMSApi.SMSAPIService", b =>
                {
                    b.Property<int>("SMSAPIServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BalanceEnquiryURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mask")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageExpiryURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SendSMSURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SMSAPIServiceId");

                    b.ToTable("SMSAPIService", "sms");
                });

            modelBuilder.Entity("SMSService.Models.Domain.AutoSMSApi.SMSAPIServiceAuditTrail", b =>
                {
                    b.Property<int>("SMSAPIServiceAuditTrailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<string>("DestinationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageFor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SendBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TextLength")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SMSAPIServiceAuditTrailId");

                    b.ToTable("SMSAPIServiceAuditTrail", "sms");
                });

            modelBuilder.Entity("DAL.Models.Domain.ImportResult.ColumnLabel", b =>
                {
                    b.HasOne("DAL.Models.Domain.ImportResult.ResultRepository", "ResultRepository")
                        .WithMany()
                        .HasForeignKey("ResultRepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResultRepository");
                });

            modelBuilder.Entity("DAL.Models.Domain.ImportResult.ColumnLabelTemp", b =>
                {
                    b.HasOne("DAL.Models.Domain.ImportResult.ResultRepositoryTemp", "ResultRepositoryTemp")
                        .WithMany()
                        .HasForeignKey("ResultRepositoryTempId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResultRepositoryTemp");
                });

            modelBuilder.Entity("DAL.Models.Domain.ImportResult.DocumentAssistIndicator", b =>
                {
                    b.HasOne("DAL.Models.Domain.ImportResult.DocumentAssist", "DocumentAssist")
                        .WithMany()
                        .HasForeignKey("DocumentAssistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.ImportResult.ExcelColumnName", "ExcelColumnName")
                        .WithMany()
                        .HasForeignKey("ExcelColumnNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.ImportResult.ResultRepository", "ResultRepository")
                        .WithMany()
                        .HasForeignKey("ResultRepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentAssist");

                    b.Navigation("ExcelColumnName");

                    b.Navigation("ResultRepository");
                });

            modelBuilder.Entity("DAL.Models.Domain.ImportResult.ResultContainer", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.ImportResult.ResultRepository", "ResultRepository")
                        .WithMany()
                        .HasForeignKey("ResultRepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("ResultRepository");
                });

            modelBuilder.Entity("DAL.Models.Domain.ImportResult.ResultContainerTemp", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.ImportResult.ResultRepositoryTemp", "ResultRepositoryTemp")
                        .WithMany()
                        .HasForeignKey("ResultRepositoryTempId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("ResultRepositoryTemp");
                });

            modelBuilder.Entity("DAL.Models.Domain.ImportResult.ResultRepository", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.DAEInstitute", "DAEInstitute")
                        .WithMany()
                        .HasForeignKey("DAEInstituteId");

                    b.HasOne("DAL.Models.Domain.MasterSetup.DegreeScholarshipLevel", "DegreeScholarshipLevel")
                        .WithMany()
                        .HasForeignKey("DegreeScholarshipLevelId");

                    b.HasOne("DAL.Models.Domain.ScholarshipSetup.SchemeLevelPolicy", "SchemeLevelPolicy")
                        .WithMany()
                        .HasForeignKey("SchemeLevelPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.ScholarshipSetup.ScholarshipFiscalYear", "ScholarshipFiscalYear")
                        .WithMany()
                        .HasForeignKey("ScholarshipFiscalYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DAEInstitute");

                    b.Navigation("DegreeScholarshipLevel");

                    b.Navigation("SchemeLevelPolicy");

                    b.Navigation("ScholarshipFiscalYear");
                });

            modelBuilder.Entity("DAL.Models.Domain.ImportResult.ResultRepositoryTemp", b =>
                {
                    b.HasOne("DAL.Models.Domain.ScholarshipSetup.SchemeLevelPolicy", "SchemeLevelPolicy")
                        .WithMany()
                        .HasForeignKey("SchemeLevelPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.ScholarshipSetup.ScholarshipFiscalYear", "ScholarshipFiscalYear")
                        .WithMany()
                        .HasForeignKey("ScholarshipFiscalYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchemeLevelPolicy");

                    b.Navigation("ScholarshipFiscalYear");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.DAEInstitute", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Degree", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.Discipline", "Discipline")
                        .WithMany()
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.QualificationLevel", "QualificationLevel")
                        .WithMany()
                        .HasForeignKey("QualificationLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discipline");

                    b.Navigation("QualificationLevel");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.DegreeLevel", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.Degree", "Degree")
                        .WithMany()
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Degree");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.DegreeScholarshipLevel", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.DegreeLevel", "DegreeLevel")
                        .WithMany()
                        .HasForeignKey("DegreeLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.SchemeLevel", "SchemeLevel")
                        .WithMany("DegreeScholarshipLevels")
                        .HasForeignKey("SchemeLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DegreeLevel");

                    b.Navigation("SchemeLevel");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.District", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.DistrictDetail", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Division", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.Provience", "Provience")
                        .WithMany()
                        .HasForeignKey("ProvienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provience");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.DocumentAssistGeneral", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.DegreeScholarshipLevel", "DegreeScholarshipLevel")
                        .WithMany()
                        .HasForeignKey("DegreeScholarshipLevelId");

                    b.HasOne("DAL.Models.Domain.ImportResult.DocumentAssist", "DocumentAssist")
                        .WithMany()
                        .HasForeignKey("DocumentAssistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.ImportResult.ExcelColumnName", "ExcelColumnName")
                        .WithMany()
                        .HasForeignKey("ExcelColumnNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.SchemeLevel", "SchemeLevel")
                        .WithMany()
                        .HasForeignKey("SchemeLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DegreeScholarshipLevel");

                    b.Navigation("DocumentAssist");

                    b.Navigation("ExcelColumnName");

                    b.Navigation("SchemeLevel");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Employee", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.BEEFSection", "BEEFSection")
                        .WithMany()
                        .HasForeignKey("BEEFSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BEEFSection");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Institute", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.InstituteType", "InstituteType")
                        .WithMany()
                        .HasForeignKey("InstituteTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.Provience", "Provience")
                        .WithMany()
                        .HasForeignKey("ProvienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InstituteType");

                    b.Navigation("Provience");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.InstituteDepartment", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.Discipline", "Discipline")
                        .WithMany()
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.InstituteFaculty", "InstituteFaculty")
                        .WithMany()
                        .HasForeignKey("InstituteFacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discipline");

                    b.Navigation("InstituteFaculty");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.InstituteFaculty", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("Institute");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Scheme", b =>
                {
                    b.HasOne("DAL.Models.Domain.ScholarshipSetup.Scholarship", "Scholarship")
                        .WithMany()
                        .HasForeignKey("ScholarshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scholarship");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.SchemeLevel", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.QualificationLevel", "QualificationLevel")
                        .WithMany()
                        .HasForeignKey("QualificationLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.Scheme", "Scheme")
                        .WithMany("SchemeLevels")
                        .HasForeignKey("SchemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institute");

                    b.Navigation("QualificationLevel");

                    b.Navigation("Scheme");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.SchemeLevelMandatoryColumn", b =>
                {
                    b.HasOne("DAL.Models.Domain.ImportResult.ExcelColumnName", "ExcelColumnName")
                        .WithMany()
                        .HasForeignKey("ExcelColumnNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.SchemeLevel", "SchemeLevel")
                        .WithMany()
                        .HasForeignKey("SchemeLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExcelColumnName");

                    b.Navigation("SchemeLevel");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.SectionComment", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.BEEFSection", "BEEFSection")
                        .WithMany()
                        .HasForeignKey("BEEFSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.SeverityLevel", "SeverityLevel")
                        .WithMany()
                        .HasForeignKey("SeverityLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BEEFSection");

                    b.Navigation("SeverityLevel");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.SelectionCriteriaGeneral", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.SchemeLevel", "SchemeLevel")
                        .WithMany()
                        .HasForeignKey("SchemeLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchemeLevel");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.UserAccessToForward", b =>
                {
                    b.HasOne("DAL.Models.Domain.Student.ApplicantCurrentStatus", "ApplicantCurrentStatus")
                        .WithMany()
                        .HasForeignKey("ApplicantCurrentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicantCurrentStatus");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.UserAccessToSchemeLevel", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.SchemeLevel", "SchemeLevel")
                        .WithMany()
                        .HasForeignKey("SchemeLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchemeLevel");
                });

            modelBuilder.Entity("DAL.Models.Domain.ScholarshipSetup.DAEInstituteQoutaBySchemeLevel", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.DAEInstitute", "DAEInstitute")
                        .WithMany()
                        .HasForeignKey("DAEInstituteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.ScholarshipSetup.PolicySRCForum", "SRCForum")
                        .WithMany()
                        .HasForeignKey("PolicySRCForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.ScholarshipSetup.SchemeLevelPolicy", "SchemeLevelPolicy")
                        .WithMany()
                        .HasForeignKey("SchemeLevelPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DAEInstitute");

                    b.Navigation("SchemeLevelPolicy");

                    b.Navigation("SRCForum");
                });

            modelBuilder.Entity("DAL.Models.Domain.ScholarshipSetup.DegreeLevelQoutaBySchemeLevel", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.DegreeScholarshipLevel", "DegreeScholarshipLevel")
                        .WithMany()
                        .HasForeignKey("DegreeScholarshipLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.ScholarshipSetup.PolicySRCForum", "SRCForum")
                        .WithMany()
                        .HasForeignKey("PolicySRCForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.ScholarshipSetup.SchemeLevelPolicy", "SchemeLevelPolicy")
                        .WithMany()
                        .HasForeignKey("SchemeLevelPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DegreeScholarshipLevel");

                    b.Navigation("SchemeLevelPolicy");

                    b.Navigation("SRCForum");
                });

            modelBuilder.Entity("DAL.Models.Domain.ScholarshipSetup.DistrictQoutaBySchemeLevel", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.ScholarshipSetup.PolicySRCForum", "SRCForum")
                        .WithMany()
                        .HasForeignKey("PolicySRCForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.ScholarshipSetup.SchemeLevelPolicy", "SchemeLevelPolicy")
                        .WithMany()
                        .HasForeignKey("SchemeLevelPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("SchemeLevelPolicy");

                    b.Navigation("SRCForum");
                });

            modelBuilder.Entity("DAL.Models.Domain.ScholarshipSetup.PolicySRCForum", b =>
                {
                    b.HasOne("DAL.Models.Domain.ScholarshipSetup.ScholarshipFiscalYear", "ScholarshipFiscalYear")
                        .WithMany()
                        .HasForeignKey("ScholarshipFiscalYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScholarshipFiscalYear");
                });

            modelBuilder.Entity("DAL.Models.Domain.ScholarshipSetup.SchemeLevelPayment", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.SchemeLevel", "SchemeLevel")
                        .WithMany()
                        .HasForeignKey("SchemeLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.ScholarshipSetup.ScholarshipFiscalYear", "ScholarshipFiscalYear")
                        .WithMany()
                        .HasForeignKey("ScholarshipFiscalYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchemeLevel");

                    b.Navigation("ScholarshipFiscalYear");
                });

            modelBuilder.Entity("DAL.Models.Domain.ScholarshipSetup.SchemeLevelPolicy", b =>
                {
                    b.HasOne("DAL.Models.Domain.ScholarshipSetup.PolicySRCForum", "PolicySRCForum")
                        .WithMany()
                        .HasForeignKey("PolicySRCForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.SchemeLevel", "SchemeLevel")
                        .WithMany()
                        .HasForeignKey("SchemeLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PolicySRCForum");

                    b.Navigation("SchemeLevel");
                });

            modelBuilder.Entity("DAL.Models.Domain.ScholarshipSetup.SelectionCriteria", b =>
                {
                    b.HasOne("DAL.Models.Domain.ImportResult.ExcelColumnName", "ExcelColumnName")
                        .WithMany()
                        .HasForeignKey("ExcelColumnNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.Operator", "Operator")
                        .WithMany()
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.ImportResult.ResultRepository", "ResultRepository")
                        .WithMany()
                        .HasForeignKey("ResultRepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExcelColumnName");

                    b.Navigation("Operator");

                    b.Navigation("ResultRepository");
                });

            modelBuilder.Entity("DAL.Models.Domain.Student.Applicant", b =>
                {
                    b.HasOne("DAL.Models.Domain.Student.ApplicantCurrentStatus", "ApplicantCurrentStatus")
                        .WithMany()
                        .HasForeignKey("ApplicantCurrentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.Student.ApplicantSelectionStatus", "ApplicantSelectionStatus")
                        .WithMany()
                        .HasForeignKey("ApplicantSelectionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.DegreeScholarshipLevel", "DegreeScholarshipLevel")
                        .WithMany()
                        .HasForeignKey("DegreeScholarshipLevelId");

                    b.HasOne("DAL.Models.Domain.MasterSetup.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.Provience", "Provience")
                        .WithMany()
                        .HasForeignKey("ProvienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.ScholarshipSetup.SchemeLevelPolicy", "SchemeLevelPolicy")
                        .WithMany()
                        .HasForeignKey("SchemeLevelPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.SelectionMethod", "SelectionMethod")
                        .WithMany()
                        .HasForeignKey("SelectionMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicantCurrentStatus");

                    b.Navigation("ApplicantSelectionStatus");

                    b.Navigation("DegreeScholarshipLevel");

                    b.Navigation("District");

                    b.Navigation("Provience");

                    b.Navigation("SchemeLevelPolicy");

                    b.Navigation("SelectionMethod");
                });

            modelBuilder.Entity("DAL.Models.Domain.Student.ApplicantAttachment", b =>
                {
                    b.HasOne("DAL.Models.Domain.Student.Applicant", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("DAL.Models.Domain.Student.ApplicantCurrentStatus", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.BEEFSection", "BEEFSection")
                        .WithMany()
                        .HasForeignKey("BEEFSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BEEFSection");
                });

            modelBuilder.Entity("DAL.Models.Domain.Student.ApplicantStudent", b =>
                {
                    b.HasOne("DAL.Models.Domain.Student.ApplicantCurrentStatus", "ApplicantCurrentStatus")
                        .WithMany()
                        .HasForeignKey("ApplicantCurrentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.Student.Applicant", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.SeverityLevel", "SeverityLevel")
                        .WithMany()
                        .HasForeignKey("SeverityLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("ApplicantCurrentStatus");

                    b.Navigation("SeverityLevel");
                });

            modelBuilder.Entity("DAL.Models.ViewModels.DAEPolicyDetailView", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.DAEInstitute", "DAEInstitute")
                        .WithMany()
                        .HasForeignKey("DAEInstituteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.ScholarshipSetup.PolicySRCForum", "SRCForum")
                        .WithMany()
                        .HasForeignKey("PolicySRCForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.ViewModels.PolicyView", null)
                        .WithMany("DAEPolicyDetailViewList")
                        .HasForeignKey("PolicyViewSchemeLevelId");

                    b.HasOne("DAL.Models.Domain.ScholarshipSetup.SchemeLevelPolicy", "SchemeLevelPolicy")
                        .WithMany()
                        .HasForeignKey("SchemeLevelPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DAEInstitute");

                    b.Navigation("SchemeLevelPolicy");

                    b.Navigation("SRCForum");
                });

            modelBuilder.Entity("DAL.Models.ViewModels.PolicyDetailView", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.ViewModels.PolicyView", null)
                        .WithMany("DistrictPolicyDetailViewList")
                        .HasForeignKey("PolicyViewSchemeLevelId");

                    b.Navigation("District");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Scheme", b =>
                {
                    b.Navigation("SchemeLevels");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.SchemeLevel", b =>
                {
                    b.Navigation("DegreeScholarshipLevels");
                });

            modelBuilder.Entity("DAL.Models.ViewModels.PolicyView", b =>
                {
                    b.Navigation("DAEPolicyDetailViewList");

                    b.Navigation("DistrictPolicyDetailViewList");
                });
#pragma warning restore 612, 618
        }
    }
}

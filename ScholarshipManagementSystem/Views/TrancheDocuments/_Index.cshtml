

@{
    ViewBag.Title = "Documents";
    ViewBag.pTitle = "Documents";
    ViewBag.pageTitle = "Tranche";
    Layout = "~/Views/_Shared/_Layout.cshtml";
}
<style>
    table, td, th {
        text-align: center
    }
</style>
<link rel="stylesheet" type="text/css" href="~/assets/libs/toastr/build/toastr.min.css">
@*<p>
    <a asp-action="GetApplicantListInTrancheForDisbursement" asp-controller="Applicants" asp-route-id="@ViewBag.TrancheId">View Current Applicant Pool</a>
</p>*@
<div id="fetchTrancheDocument">
    @(await Component.InvokeAsync("TrancheDocument", new { id = ViewBag.TrancheId }))
</div>

@section Scripts
{
    <script src="~/js/bootstrap-waitingfor.js"></script>
    <script src="~/assets/libs/toastr/build/toastr.min.js"></script>
    <script>
    function generatePGPFile(trancheDocumentId) {       
        $('.loading').show();
        $.ajax({
            type: "POST",
            url: "/TrancheDocuments/GeneratePGP",
            data: { trancheDocumentId: trancheDocumentId },
            dataType: "json",
            success: function (response) {
                if (response.isValid) {
                    //uploadSFTPFile(trancheDocumentId);
                    //fetchTrancheDocumentData();
                    $('#datatable').DataTable();
                    notificationme("PGP File Generated Successfully!");
                } else {
                    notificationme("Failed to Generate PGP File!");
                }
                $('.loading').hide();
            },
            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {
                alert(response.responseText);
            }
        });
        }

        function uploadSFTPFile(trancheDocumentId) {            
            waitingDialog.show('Uploading PGP File On Server...', {
                // if the option is set to boolean false, it will hide the header and "message" will be set in a paragraph above the progress bar.
                // When headerText is a not-empty string, "message" becomes a content above the progress bar and headerText string will be set as a text inside the H3;
                headerText: '',
                // this will generate a heading corresponding to the size number
                headerSize: 3,
                // extra class(es) for the header tag
                headerClass: '',
                // bootstrap postfix for dialog size, e.g. "sm", "m"
                dialogSize: 'sm',
                // bootstrap postfix for progress bar type, e.g. "success", "warning";
                progressType: 'success',
                // determines the tag of the content element
                contentElement: 'p',
                // extra class(es) for the content tag
                contentClass: 'content'
            });
            $('.loading').show();
            $("#sendToServer").attr('disabled', 'disabled');
            $.ajax({
                type: "POST",
                url: "/TrancheDocuments/SFTPUploadFile",
                data: { trancheDocumentId: trancheDocumentId },
                dataType: "json",
                success: function (response) {
                    waitingDialog.hide();
                    $("#sendToServer").removeAttr('disabled');
                    if (response.isValid) {
                        fetchTrancheDocumentData();
                        $('#datatable').DataTable();                                               
                        notificationme("Uploaded File Successfully!");
                    } else {
                        notificationme("Failed to Upload File on Server!");
                    }
                    $('.loading').hide();
                },
                failure: function (response) {
                    alert(response.responseText);
                },
                error: function (response) {
                    alert(response.responseText);
                }
            });
        }
        function uploadDisbursementFile(trancheDocumentId) {

            $('.loading').show();

             var excelFile = document.getElementById('ExcelFile');
            //alert(excelFile.files[0].name);
            if (excelFile.files.length == 0) {
                notificationme("Please attach file!");
                //return;
            } else {
                formData = new FormData();
            $("#ImportResultLoading").show();
            $('#btnImportResult').prop('disabled', true);
            for (var i = 0; i < excelFile.files.length; i++) {
                var file = ExcelFile.files[i];
                formData.append("excelFile", file);
            }
            formData.append("trancheDocumentId", trancheDocumentId);
            $.ajax({
                type: "POST",
                url: '@Url.Action("UploadDisbursementFile", "TrancheDocuments")',
                data: formData,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                contentType: false,
                processData: false,
                success: function (data) {
                    $('#uploadForm').trigger("reset");
                    $('#myModal').modal('hide');
                    notificationme(data.message);
                },
                error: function (data) {
                    alert(data.message);
                }
            });
            }
        }
    function fetchTrancheDocumentData() {
            $(".loading").show();
            var trancheId = '@ViewBag.TrancheId';
            $.ajax({
            url: '@Url.Action("ReloadTrancheDocument", "TrancheDocuments")',
            data: {
                id: trancheId
            },
                success: function (data) {
                    $("#fetchTrancheDocument").html(data);
                $(".loading").hide();
            }
        });
        }

    function notificationme(message) {
        toastr.options = {
            "closeButton": false,
            "debug": false,
            "newestOnTop": false,
            "progressBar": true,
            "preventDuplicates": true,
            "onclick": null,
            "showDuration": "100",
            "positionClass": "toast-bottom-right",
            "hideDuration": "1000",
            "timeOut": "5000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "show",
            "hideMethod": "hide"
        };
        toastr.info(message);
    }
    </script>

}